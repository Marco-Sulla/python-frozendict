from frozendict import frozendict
from immutabledict import immutabledict

class FrozendictSubclass(frozendict):
    def __new__(cls, *args, **kwargs):
            return super().__new__(cls, *args, **kwargs)

d = dict(a=1, b=2)
fd = frozendict(a=1, b=2)
sub = FrozendictSubclass(a=1, b=2)
reveal_type(d["abc"])
reveal_type(fd["abc"])
reveal_type(sub["abc"])
reveal_type(len(d))
reveal_type(len(fd))
reveal_type(len(sub))
reveal_type(iter(d))
reveal_type(iter(fd))
reveal_type(iter(sub))
reveal_type(hash(d))
reveal_type(hash(fd))
reveal_type(hash(sub))
reveal_type(repr(d))
reveal_type(repr(fd))
reveal_type(repr(sub))
reveal_type(dict.fromkeys("abc", 0))
reveal_type(frozendict.fromkeys("abc", 0))
reveal_type(FrozendictSubclass.fromkeys("abc", 0))
reveal_type(d.copy())
reveal_type(fd.copy())
reveal_type(sub.copy())
reveal_type(tuple(d.items())[0])
reveal_type(fd.item(0))
reveal_type(sub.item(0))
reveal_type(tuple(d.keys())[0])
reveal_type(fd.key(0))
reveal_type(sub.key(0))
reveal_type(tuple(d.values())[0])
reveal_type(fd.value(0))
reveal_type(sub.value(0))
reveal_type(d.get("abc"))
reveal_type(fd.get("abc"))
reveal_type(sub.get("abc"))
reveal_type(d.items())
reveal_type(fd.items())
reveal_type(sub.items())

reveal_type(fd.set("abc", 1))
reveal_type(sub.set("abc", 1))
reveal_type(fd.delete("abc"))
reveal_type(sub.delete("abc"))
