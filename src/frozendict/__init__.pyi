from collections.abc import Hashable
from typing import NoReturn, TypeVar, overload, Type, Optional, Tuple

try:
    from typing import Mapping, Sequence, Iterable, Iterator
except ImportError:
    from collections.abc import Mapping, Sequence, Iterable, Iterator

K = TypeVar("K")
V = TypeVar("V")
KV = TypeVar("KV", K, V)
SelfT = TypeVar("SelfT", bound=frozendict[K, V])

class frozendict(Mapping[K, V]):
    @overload
    def __new__(cls: Type[SelfT], **kwargs: V) -> SelfT: ...
    @overload
    def __new__(cls: Type[SelfT], mapping: Mapping[K, V]) -> SelfT: ...
    @overload
    def __new__(cls: Type[SelfT], iterable: Iterable[Sequence[KV]]) -> SelfT: ...
    
    def __getitem__(self: SelfT, key: K) -> V: ...
    def __len__(self: SelfT) -> int: ...
    def __iter__(self: SelfT) -> Iterator[K]: ...
    def __hash__(self: SelfT) -> int: ...
    def copy(self: SelfT) -> SelfT: ...
    def __copy__(self: SelfT) -> SelfT: ...
    def __deepcopy__(self: SelfT) -> SelfT: ...
    # Omit __reduce__, its used for Pickle and we don't need the annotation in code.
    def set(self: SelfT, key: K, value: V) -> SelfT: ...
    def setdefault(self: SelfT, key: K, default: V) -> SelfT: ...
    def delete(self: SelfT, key: K) -> SelfT: ...
    def key(self: SelfT, index: int) -> K: ...
    def value(self: SelfT, index: int) -> V: ...
    def item(self: SelfT, index: int) -> Tuple[K, V]: ...
    def __or__(self: SelfT, other: Mapping[K, V]) -> SelfT: ...
    def __reversed__(self: SelfT) -> Iterator[K]: ...
    
    @classmethod
    def fromkeys(
        cls: Type[SelfT], 
        seq: Iterable[K], 
        value: Optional[V] = None
    ) -> SelfT: ...

    # Blacklisted methods:
    def __setattr__(self, *a, **kw) -> NoReturn: ...
    def __delattr__(self, *a, **kw) -> NoReturn: ...


FrozenOrderedDict = frozendict
