import collections
from _typeshed import Self
from collections.abc import Iterable, Iterator, Mapping
from typing import Any, Generic, NoReturn, Tuple, TypeVar, Union, overload

_KT = TypeVar("_KT")
_VT = TypeVar("_VT")

def frozendict_or(
    self: Mapping[_KT, _VT], other: Mapping[_KT, _VT]
) -> "frozendict[_KT, _VT]": ...

class frozendict(Mapping[_KT, _VT], Generic[_KT, _VT]):
    # Fake __init__ to describe what __new__ does:
    dict_cls: type[dict[Any, Any]] = ...
    @overload
    def __init__(self, **kwargs: _VT) -> None: ...
    @overload
    def __init__(self, mapping: Mapping[_KT, _VT]) -> None: ...
    @overload
    def __init__(self, iterable: Iterable[tuple[_KT, _VT]]) -> None: ...

    # Magic Methods:
    def __getitem__(self, __key: _KT) -> _VT: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_KT]: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def copy(self: Self) -> Self: ...
    def __copy__(self: Self) -> Self: ...
    def __deepcopy__(self: Self) -> Self: ...
    # Omit __reduce__, its used for Pickle and we don't need the annotation in code.
    def set(self, key: _KT, value: _VT) -> frozendict[_KT, _VT]: ...
    # This weird type annotation is to support subclassing frozendict. It should
    # resolve to `frozendict[_KT, _VT]`.
    def setdefault(self: Self, key: _KT, default: _VT) -> Union[Self, frozendict[_KT, _VT]]: ...
    def delete(self, key: _KT) -> frozendict[_KT, _VT]: ...
    def key(self, index: int) -> _KT: ...
    def value(self, index: int) -> _VT: ...
    def item(self, index: int) -> tuple[_KT, _VT]: ...
    def __or__(self: Mapping[_KT, _VT], other: Mapping[_KT, _VT]) -> frozendict[_KT, _VT]: ...
    def __ior__(self: Mapping[_KT, _VT], other: Mapping[_KT, _VT]) -> frozendict[_KT, _VT]: ...
    def __reversed__(self) -> Iterator[Tuple[_KT, _VT]]: ...

    # Blacklisted methods:
    def __setitem__(self, *a, **kw) -> NoReturn: ...
    def __delitem__(self, *a, **kw) -> NoReturn: ...
    def __setattr__(self, *a, **kw) -> NoReturn: ...
    def __delattr__(self, *a, **kw) -> NoReturn: ...
    def clear(self, *a, **kw) -> NoReturn: ...
    def pop(self, *a, **kw) -> NoReturn: ...
    def popitem(self, *a, **kw) -> NoReturn: ...
    def update(self, *a, **kw) -> NoReturn: ...


class FrozenOrderedDict(frozendict[_KT, _VT]):
    dict_cls: type[collections.OrderedDict[Any, Any]] = ...
